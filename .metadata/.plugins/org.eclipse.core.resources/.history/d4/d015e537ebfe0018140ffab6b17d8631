<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<flow name="rabbitmq-publisher-using-api" doc:id="c949c240-a41c-4589-9722-289747f57ec9" doc:description="TO DO
#Validate EventID
	GET Event detail from Database
	If No detail found
		Return response to end user
	else
	get exchange name
		validate exchange name. Make sure exchange exists on messaging server
		/api/exchanges/vhost/name
			if no exchange found
				god knows.. I don't know what to do here
			If found
				Create JSON data 
					{&quot;properties&quot;:{},&quot;routing_key&quot;:&quot;my key&quot;,&quot;payload&quot;:&quot;my body&quot;,&quot;payload_encoding&quot;:&quot;string&quot;} and save it in variable
		
	User HTTP Request to make REST API call to messaging server for publishing message
		Basic Authentication
		End Point
			/exchanges/{vhost}/{exchange-name}/publish
	Return success response (201) since this is a post call

THINGS TO NOTE:
Create config file and add paramaters whenever possible
Log every step
Database table minimum records: exchangename, routing key, vhost info, ">
		<http:listener doc:name="Listener" doc:id="efb0977d-d90d-43a5-8e24-d5fca7f4f3ed" path="/events/send-api" outputMimeType="application/json" allowedMethods="POST" config-ref="HTTP_Listener_config"/>
		<set-variable value="#[payload]" doc:name="Save Payload" doc:id="4f2b937f-f8fb-43df-9c4b-88a84b8f22b3" variableName="msgPayload"/>
		<db:select doc:name="GET event details from Database" doc:id="c7845535-3644-4aa7-93c8-2b82042d23b4" config-ref="Database_Config">
			<db:sql >SELECT * FROM EventCatalog where EventTypeID= :ID</db:sql>
			<db:input-parameters ><![CDATA[#[output application/java
 ---
 {
     'ID' : vars.msgPayload.eventtypeid
 }]]]></db:input-parameters>
		</db:select>
		<ee:transform doc:name="GET first item from an Array" doc:id="bc738530-23e6-486f-a12f-47e555490cb2" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="eventcatalog" ><![CDATA[%dw 2.0
output application/json
---
payload[0]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Create payload for RabbitMQ broker" doc:id="084d51ba-171b-4e98-a48e-1eb211b228f3" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="payloadtorabbit" ><![CDATA[%dw 2.0
output application/json
---
{	
	"properties":{},
	"routing_key":vars.eventcatalog.RoutingKey as String,
	"payload":vars.msgPayload.message,
	"payload_encoding":"string"
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<http:request method="POST" doc:name="Send Payload using RabbitMQ API" doc:id="1f4e8435-e9f2-4d5c-a489-c6b3c5444950" config-ref="HTTP_Request_configuration" path='#[output application/java
---
"/exchanges/" ++ vars.eventcatalog.vhost ++ "/" ++ vars.eventcatalog.ExchangeName ++ "/publish"]'>
			<http:body ><![CDATA[#[vars.payloadtorabbit]]]></http:body>
		</http:request>
		<logger level="INFO" doc:name="Logger" doc:id="f023b8a1-3dd5-45ed-bacd-49ec204f0979" />
	</flow>
	<flow name="rabbitmq-publisher-using-AMQP-connector" doc:id="0e7ff961-7062-4041-983f-2973c3e54c5b" doc:description="TO DO
#Validate EventID
	GET Event detail from Database
	If No detail found
		Return response to end user
	else
	get exchange name
		validate exchange name. Make sure exchange exists on messaging server
		/api/exchanges/vhost/name
			if no exchange found
				god knows.. I don't know what to do here
			If found
				Create JSON data 
					{&quot;properties&quot;:{},&quot;routing_key&quot;:&quot;my key&quot;,&quot;payload&quot;:&quot;my body&quot;,&quot;payload_encoding&quot;:&quot;string&quot;} and save it in variable
		
	User HTTP Request to make REST API call to messaging server for publishing message
		Basic Authentication
		End Point
			/exchanges/{vhost}/{exchange-name}/publish
	Return success response (201) since this is a post call

THINGS TO NOTE:
Create config file and add paramaters whenever possible
Log every step
Database table minimum records: exchangename, routing key, vhost info, ">
		<http:listener doc:name="Listener" doc:id="00c598f7-3bd6-4bbe-ba58-5ca355dae10f" config-ref="HTTP_Listener_config" path="/events/send-amqp" outputMimeType="application/json" allowedMethods="POST" >
			<non-repeatable-stream />
		</http:listener>
		<set-variable value="#[payload]" doc:name="Save Payload " doc:id="efed6680-61d7-4a72-9876-408acdbee9dd" variableName="msgPayload-amqp" />
		<amqp:publish doc:name="Publish" doc:id="88d3e247-31df-4cd2-bc44-152890f4c4d6" config-ref="AMQP_Config" exchangeName="enrollment" sendCorrelationId="AUTO">
			<amqp:routing-keys >
				<amqp:routing-key value="2019E" />
			</amqp:routing-keys>
			<amqp:message >
				<amqp:body ><![CDATA[#[output application/json
---

{"test":"Geda Jasto Zindagi"}]]]></amqp:body>
				<amqp:properties />
			</amqp:message>
		</amqp:publish>
		<logger level="INFO" doc:name="" doc:id="5b5bdc16-62f9-4987-9c3c-dd614765f100" />
	</flow>
</mule>
